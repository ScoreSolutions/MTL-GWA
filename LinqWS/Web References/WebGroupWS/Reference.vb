'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5456.
'
Namespace WebGroupWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MagicWS_WebGroupBinding", [Namespace]:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
    Partial Public Class MagicWS_WebGroup
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetUserProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserJoinCaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContactNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeUserProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDetailMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSectionNameListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HltClmPaidByBenefitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HltClmPaidByBenefit_GraphOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelHltClmPaidByBenefitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HltClmPaidByAcc_EmpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelHltClmPaidByAcc_EmpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertUserProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUserProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertUserProfileDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUserProfileDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBrokerNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBrokerNameListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountNameListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountUserProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQueryAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitNonHealthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitHealthIPDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitHealthOPDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitHealthDentalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitHealthMajorMedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitHealthMaternityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HltClmPaidByDiagnoseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelHltClmPaidByDiagnoseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HltClmPaidByHospitalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelHltClmPaidByHospitalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HltClmPaidByPlanRelationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HltClmPaidByPlanRelation_GraphOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelHltClmPaidByPlanRelationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LinqWS.My.MySettings.Default.LinqWS_WebGroupWS_MagicWS_WebGroup
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetUserProfileCompleted As GetUserProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserJoinCaseCompleted As GetUserJoinCaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContactNameCompleted As GetContactNameCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeUserProfileCompleted As ChangeUserProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordCompleted As ChangePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryMemberCompleted As GetQueryMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDetailMemberCompleted As GetDetailMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSectionNameListCompleted As GetSectionNameListCompletedEventHandler
        
        '''<remarks/>
        Public Event HltClmPaidByBenefitCompleted As HltClmPaidByBenefitCompletedEventHandler
        
        '''<remarks/>
        Public Event HltClmPaidByBenefit_GraphCompleted As HltClmPaidByBenefit_GraphCompletedEventHandler
        
        '''<remarks/>
        Public Event DelHltClmPaidByBenefitCompleted As DelHltClmPaidByBenefitCompletedEventHandler
        
        '''<remarks/>
        Public Event HltClmPaidByAcc_EmpCompleted As HltClmPaidByAcc_EmpCompletedEventHandler
        
        '''<remarks/>
        Public Event DelHltClmPaidByAcc_EmpCompleted As DelHltClmPaidByAcc_EmpCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertUserProfileCompleted As InsertUserProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserProfileCompleted As UpdateUserProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUserProfileCompleted As DeleteUserProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertUserProfileDetailCompleted As InsertUserProfileDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUserProfileDetailCompleted As DeleteUserProfileDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBrokerNameCompleted As GetBrokerNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBrokerNameListCompleted As GetBrokerNameListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountNameCompleted As GetAccountNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountNameListCompleted As GetAccountNameListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountUserProfileCompleted As GetAccountUserProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountDetailCompleted As GetAccountDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQueryAccountCompleted As GetQueryAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitNonHealthCompleted As GetBenefitNonHealthCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitHealthIPDCompleted As GetBenefitHealthIPDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitHealthOPDCompleted As GetBenefitHealthOPDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitHealthDentalCompleted As GetBenefitHealthDentalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitHealthMajorMedCompleted As GetBenefitHealthMajorMedCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitHealthMaternityCompleted As GetBenefitHealthMaternityCompletedEventHandler
        
        '''<remarks/>
        Public Event HltClmPaidByDiagnoseCompleted As HltClmPaidByDiagnoseCompletedEventHandler
        
        '''<remarks/>
        Public Event DelHltClmPaidByDiagnoseCompleted As DelHltClmPaidByDiagnoseCompletedEventHandler
        
        '''<remarks/>
        Public Event HltClmPaidByHospitalCompleted As HltClmPaidByHospitalCompletedEventHandler
        
        '''<remarks/>
        Public Event DelHltClmPaidByHospitalCompleted As DelHltClmPaidByHospitalCompletedEventHandler
        
        '''<remarks/>
        Public Event HltClmPaidByPlanRelationCompleted As HltClmPaidByPlanRelationCompletedEventHandler
        
        '''<remarks/>
        Public Event HltClmPaidByPlanRelation_GraphCompleted As HltClmPaidByPlanRelation_GraphCompletedEventHandler
        
        '''<remarks/>
        Public Event DelHltClmPaidByPlanRelationCompleted As DelHltClmPaidByPlanRelationCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C243230213C233230213C223230213C213230213C203230213C293130213C283130213C27313021"& _ 
            "3C263130213C253130213C243130213C233130213C223130213C213130213C203130213C2930213C"& _ 
            "2830213C2730213C2630213C2530213C2430213C23302F2D2F2E6F69647163696C6070714F505257"& _ 
            "4245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetUserProfile( _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_user_passwd As String,  _
                    ByRef p_out_user_type As String,  _
                    ByRef p_out_user_name_t As String,  _
                    ByRef p_out_user_name_e As String,  _
                    ByRef p_out_broker_code As String,  _
                    ByRef p_out_ac_code As String,  _
                    ByRef p_out_company_name As String,  _
                    ByRef p_out_passwd_date As String,  _
                    ByRef p_out_user_s_date As String,  _
                    ByRef p_out_user_e_date As String,  _
                    ByRef p_out_user_level As String,  _
                    ByRef p_out_user_email As String,  _
                    ByRef p_out_user_tel As String,  _
                    ByRef p_out_marker_email As String,  _
                    ByRef p_out_market_cc_email As String,  _
                    ByRef p_out_claim_email As String,  _
                    ByRef p_out_claim_cc_email As String,  _
                    ByRef p_out_disc_reason As String,  _
                    ByRef p_out_is_first_login As String,  _
                    ByRef p_out_login_fail_count As String,  _
                    ByRef p_out_input_person As String,  _
                    ByRef p_out_mnt_dttm As String,  _
                    ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("GetUserProfile", New Object() {p_in_user_id, p_in_user_passwd})
            p_out_user_type = CType(results(0),String)
            p_out_user_name_t = CType(results(1),String)
            p_out_user_name_e = CType(results(2),String)
            p_out_broker_code = CType(results(3),String)
            p_out_ac_code = CType(results(4),String)
            p_out_company_name = CType(results(5),String)
            p_out_passwd_date = CType(results(6),String)
            p_out_user_s_date = CType(results(7),String)
            p_out_user_e_date = CType(results(8),String)
            p_out_user_level = CType(results(9),String)
            p_out_user_email = CType(results(10),String)
            p_out_user_tel = CType(results(11),String)
            p_out_marker_email = CType(results(12),String)
            p_out_market_cc_email = CType(results(13),String)
            p_out_claim_email = CType(results(14),String)
            p_out_claim_cc_email = CType(results(15),String)
            p_out_disc_reason = CType(results(16),String)
            p_out_is_first_login = CType(results(17),String)
            p_out_login_fail_count = CType(results(18),String)
            p_out_input_person = CType(results(19),String)
            p_out_mnt_dttm = CType(results(20),String)
            p_out_isFound = CType(results(21),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserProfileAsync(ByVal p_in_user_id As String, ByVal p_in_user_passwd As String)
            Me.GetUserProfileAsync(p_in_user_id, p_in_user_passwd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserProfileAsync(ByVal p_in_user_id As String, ByVal p_in_user_passwd As String, ByVal userState As Object)
            If (Me.GetUserProfileOperationCompleted Is Nothing) Then
                Me.GetUserProfileOperationCompleted = AddressOf Me.OnGetUserProfileOperationCompleted
            End If
            Me.InvokeAsync("GetUserProfile", New Object() {p_in_user_id, p_in_user_passwd}, Me.GetUserProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserProfileCompleted(Me, New GetUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C233130213C223130213C213130213C203130213C2930213C2830213C2730213C2630213C253021"& _ 
            "3C2430213C2330213C22302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetUserJoinCase(ByVal p_in_user_id As String, ByRef p_out_case As String, ByRef p_out_case2 As String, ByRef p_out_case3 As String, ByRef p_out_case4 As String, ByRef p_out_case5 As String, ByRef p_out_case6 As String, ByRef p_out_case7 As String, ByRef p_out_case8 As String, ByRef p_out_case9 As String, ByRef p_out_case10 As String, ByRef p_out_msg_data_over As String, ByRef p_out_isFoundCase As String)
            Dim results() As Object = Me.Invoke("GetUserJoinCase", New Object() {p_in_user_id})
            p_out_case = CType(results(0),String)
            p_out_case2 = CType(results(1),String)
            p_out_case3 = CType(results(2),String)
            p_out_case4 = CType(results(3),String)
            p_out_case5 = CType(results(4),String)
            p_out_case6 = CType(results(5),String)
            p_out_case7 = CType(results(6),String)
            p_out_case8 = CType(results(7),String)
            p_out_case9 = CType(results(8),String)
            p_out_case10 = CType(results(9),String)
            p_out_msg_data_over = CType(results(10),String)
            p_out_isFoundCase = CType(results(11),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserJoinCaseAsync(ByVal p_in_user_id As String)
            Me.GetUserJoinCaseAsync(p_in_user_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserJoinCaseAsync(ByVal p_in_user_id As String, ByVal userState As Object)
            If (Me.GetUserJoinCaseOperationCompleted Is Nothing) Then
                Me.GetUserJoinCaseOperationCompleted = AddressOf Me.OnGetUserJoinCaseOperationCompleted
            End If
            Me.InvokeAsync("GetUserJoinCase", New Object() {p_in_user_id}, Me.GetUserJoinCaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserJoinCaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserJoinCaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserJoinCaseCompleted(Me, New GetUserJoinCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2730213C2630213C2530213C2430213C23302F2D2F2E6F69647163696C6070714F505257424547"& _ 
            "5A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetContactName(ByVal p_in_gpo_user_id As String, ByVal p_in_language As String, ByRef p_out_gpo_name As String, ByRef p_out_gpo_email As String, ByRef p_out_gpo_tel As String, ByRef p_out_gpo_cc_email As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("GetContactName", New Object() {p_in_gpo_user_id, p_in_language})
            p_out_gpo_name = CType(results(0),String)
            p_out_gpo_email = CType(results(1),String)
            p_out_gpo_tel = CType(results(2),String)
            p_out_gpo_cc_email = CType(results(3),String)
            p_out_isFound = CType(results(4),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContactNameAsync(ByVal p_in_gpo_user_id As String, ByVal p_in_language As String)
            Me.GetContactNameAsync(p_in_gpo_user_id, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContactNameAsync(ByVal p_in_gpo_user_id As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetContactNameOperationCompleted Is Nothing) Then
                Me.GetContactNameOperationCompleted = AddressOf Me.OnGetContactNameOperationCompleted
            End If
            Me.InvokeAsync("GetContactName", New Object() {p_in_gpo_user_id, p_in_language}, Me.GetContactNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContactNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContactNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContactNameCompleted(Me, New GetContactNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C25302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub ChangeUserProfile(ByVal p_in_user_id As String, ByVal p_in_user_passwd As String, ByVal p_in_user_email As String, ByVal p_in_user_tel As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("ChangeUserProfile", New Object() {p_in_user_id, p_in_user_passwd, p_in_user_email, p_in_user_tel})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUserProfileAsync(ByVal p_in_user_id As String, ByVal p_in_user_passwd As String, ByVal p_in_user_email As String, ByVal p_in_user_tel As String)
            Me.ChangeUserProfileAsync(p_in_user_id, p_in_user_passwd, p_in_user_email, p_in_user_tel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUserProfileAsync(ByVal p_in_user_id As String, ByVal p_in_user_passwd As String, ByVal p_in_user_email As String, ByVal p_in_user_tel As String, ByVal userState As Object)
            If (Me.ChangeUserProfileOperationCompleted Is Nothing) Then
                Me.ChangeUserProfileOperationCompleted = AddressOf Me.OnChangeUserProfileOperationCompleted
            End If
            Me.InvokeAsync("ChangeUserProfile", New Object() {p_in_user_id, p_in_user_passwd, p_in_user_email, p_in_user_tel}, Me.ChangeUserProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeUserProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeUserProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeUserProfileCompleted(Me, New ChangeUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C26302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub ChangePassword(ByVal p_in_user_id As String, ByVal p_in_user_passwd As String, ByVal p_in_pass_date As String, ByVal p_in_input_person As String, ByVal p_in_mnt_dttm As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("ChangePassword", New Object() {p_in_user_id, p_in_user_passwd, p_in_pass_date, p_in_input_person, p_in_mnt_dttm})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal p_in_user_id As String, ByVal p_in_user_passwd As String, ByVal p_in_pass_date As String, ByVal p_in_input_person As String, ByVal p_in_mnt_dttm As String)
            Me.ChangePasswordAsync(p_in_user_id, p_in_user_passwd, p_in_pass_date, p_in_input_person, p_in_mnt_dttm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal p_in_user_id As String, ByVal p_in_user_passwd As String, ByVal p_in_pass_date As String, ByVal p_in_input_person As String, ByVal p_in_mnt_dttm As String, ByVal userState As Object)
            If (Me.ChangePasswordOperationCompleted Is Nothing) Then
                Me.ChangePasswordOperationCompleted = AddressOf Me.OnChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("ChangePassword", New Object() {p_in_user_id, p_in_user_passwd, p_in_pass_date, p_in_input_person, p_in_mnt_dttm}, Me.ChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordCompleted(Me, New ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C253130213C243130213C233130213C223130213C2131302F2D2F2E6F69647163696C6070714F50"& _ 
            "52574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetQueryMember(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_sect_code As String, ByVal p_in_language As String, ByVal p_in_member_no As String, ByVal p_in_employee_no As String, ByVal p_in_hlt_card_no As String, ByVal p_in_mem_name As String, ByVal p_in_mem_surname As String, ByRef p_out_mem_search As String, ByRef p_out_mem_search2 As String, ByRef p_out_mem_search3 As String, ByRef p_out_msg_data_over As String, ByRef p_out_isFound_mem As String)
            Dim results() As Object = Me.Invoke("GetQueryMember", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_sect_code, p_in_language, p_in_member_no, p_in_employee_no, p_in_hlt_card_no, p_in_mem_name, p_in_mem_surname})
            p_out_mem_search = CType(results(0),String)
            p_out_mem_search2 = CType(results(1),String)
            p_out_mem_search3 = CType(results(2),String)
            p_out_msg_data_over = CType(results(3),String)
            p_out_isFound_mem = CType(results(4),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryMemberAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_sect_code As String, ByVal p_in_language As String, ByVal p_in_member_no As String, ByVal p_in_employee_no As String, ByVal p_in_hlt_card_no As String, ByVal p_in_mem_name As String, ByVal p_in_mem_surname As String)
            Me.GetQueryMemberAsync(p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_sect_code, p_in_language, p_in_member_no, p_in_employee_no, p_in_hlt_card_no, p_in_mem_name, p_in_mem_surname, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryMemberAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_sect_code As String, ByVal p_in_language As String, ByVal p_in_member_no As String, ByVal p_in_employee_no As String, ByVal p_in_hlt_card_no As String, ByVal p_in_mem_name As String, ByVal p_in_mem_surname As String, ByVal userState As Object)
            If (Me.GetQueryMemberOperationCompleted Is Nothing) Then
                Me.GetQueryMemberOperationCompleted = AddressOf Me.OnGetQueryMemberOperationCompleted
            End If
            Me.InvokeAsync("GetQueryMember", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_sect_code, p_in_language, p_in_member_no, p_in_employee_no, p_in_hlt_card_no, p_in_mem_name, p_in_mem_surname}, Me.GetQueryMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryMemberCompleted(Me, New GetQueryMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C233230213C223230213C213230213C203230213C293130213C283130213C273130213C26313021"& _ 
            "3C253130213C243130213C233130213C223130213C213130213C203130213C2930213C2830213C27"& _ 
            "30213C26302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetDetailMember( _
                    ByVal p_in_grp_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_pol_year As String,  _
                    ByVal p_in_language As String,  _
                    ByVal p_in_member_no As String,  _
                    ByRef p_out_effect_date As String,  _
                    ByRef p_out_plan_e_date As String,  _
                    ByRef p_out_benefit_sts As String,  _
                    ByRef p_out_mem_dob As String,  _
                    ByRef p_out_mem_age As String,  _
                    ByRef p_out_mem_sex As String,  _
                    ByRef p_out_mem_sect As String,  _
                    ByRef p_out_mem_bkac_no As String,  _
                    ByRef p_out_hlt_card As String,  _
                    ByRef p_out_consider As String,  _
                    ByRef p_out_plan_notepad1 As String,  _
                    ByRef p_out_plan_notepad2 As String,  _
                    ByRef p_out_plan_nonhlt As String,  _
                    ByRef p_out_plan_code_h1 As String,  _
                    ByRef p_out_plan_code_h2 As String,  _
                    ByRef p_out_plan_hlt1 As String,  _
                    ByRef p_out_plan_hlt2 As String,  _
                    ByRef p_out_isFound_det As String)
            Dim results() As Object = Me.Invoke("GetDetailMember", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_language, p_in_member_no})
            p_out_effect_date = CType(results(0),String)
            p_out_plan_e_date = CType(results(1),String)
            p_out_benefit_sts = CType(results(2),String)
            p_out_mem_dob = CType(results(3),String)
            p_out_mem_age = CType(results(4),String)
            p_out_mem_sex = CType(results(5),String)
            p_out_mem_sect = CType(results(6),String)
            p_out_mem_bkac_no = CType(results(7),String)
            p_out_hlt_card = CType(results(8),String)
            p_out_consider = CType(results(9),String)
            p_out_plan_notepad1 = CType(results(10),String)
            p_out_plan_notepad2 = CType(results(11),String)
            p_out_plan_nonhlt = CType(results(12),String)
            p_out_plan_code_h1 = CType(results(13),String)
            p_out_plan_code_h2 = CType(results(14),String)
            p_out_plan_hlt1 = CType(results(15),String)
            p_out_plan_hlt2 = CType(results(16),String)
            p_out_isFound_det = CType(results(17),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDetailMemberAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_language As String, ByVal p_in_member_no As String)
            Me.GetDetailMemberAsync(p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_language, p_in_member_no, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDetailMemberAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_language As String, ByVal p_in_member_no As String, ByVal userState As Object)
            If (Me.GetDetailMemberOperationCompleted Is Nothing) Then
                Me.GetDetailMemberOperationCompleted = AddressOf Me.OnGetDetailMemberOperationCompleted
            End If
            Me.InvokeAsync("GetDetailMember", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_language, p_in_member_no}, Me.GetDetailMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDetailMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDetailMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDetailMemberCompleted(Me, New GetDetailMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2730213C26302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetSectionNameList(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_sect_code As String, ByVal p_in_sect_name As String, ByVal p_in_language As String, ByRef p_out_sect_search As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("GetSectionNameList", New Object() {p_in_grp_code, p_in_ac_code, p_in_sect_code, p_in_sect_name, p_in_language})
            p_out_sect_search = CType(results(0),String)
            p_out_isFound = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSectionNameListAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_sect_code As String, ByVal p_in_sect_name As String, ByVal p_in_language As String)
            Me.GetSectionNameListAsync(p_in_grp_code, p_in_ac_code, p_in_sect_code, p_in_sect_name, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSectionNameListAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_sect_code As String, ByVal p_in_sect_name As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetSectionNameListOperationCompleted Is Nothing) Then
                Me.GetSectionNameListOperationCompleted = AddressOf Me.OnGetSectionNameListOperationCompleted
            End If
            Me.InvokeAsync("GetSectionNameList", New Object() {p_in_grp_code, p_in_ac_code, p_in_sect_code, p_in_sect_name, p_in_language}, Me.GetSectionNameListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSectionNameListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSectionNameListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSectionNameListCompleted(Me, New GetSectionNameListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C233130213C223130213C213130213C203130213C2930213C2830213C27302F2D2F2E6F69647163"& _ 
            "696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub HltClmPaidByBenefit(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_language As String, ByRef p_out_as_of_date As String, ByRef p_out_effect_date As String, ByRef p_out_expire_date As String, ByRef p_out_pol_name As String, ByRef p_out_ac_name As String, ByRef p_out_hlt_clm As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("HltClmPaidByBenefit", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language})
            p_out_as_of_date = CType(results(0),String)
            p_out_effect_date = CType(results(1),String)
            p_out_expire_date = CType(results(2),String)
            p_out_pol_name = CType(results(3),String)
            p_out_ac_name = CType(results(4),String)
            p_out_hlt_clm = CType(results(5),String)
            p_out_isFound = CType(results(6),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByBenefitAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_language As String)
            Me.HltClmPaidByBenefitAsync(p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByBenefitAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.HltClmPaidByBenefitOperationCompleted Is Nothing) Then
                Me.HltClmPaidByBenefitOperationCompleted = AddressOf Me.OnHltClmPaidByBenefitOperationCompleted
            End If
            Me.InvokeAsync("HltClmPaidByBenefit", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language}, Me.HltClmPaidByBenefitOperationCompleted, userState)
        End Sub
        
        Private Sub OnHltClmPaidByBenefitOperationCompleted(ByVal arg As Object)
            If (Not (Me.HltClmPaidByBenefitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HltClmPaidByBenefitCompleted(Me, New HltClmPaidByBenefitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2530213C24302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub HltClmPaidByBenefit_Graph(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByRef p_out_clm_by_treat_grp As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("HltClmPaidByBenefit_Graph", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year})
            p_out_clm_by_treat_grp = CType(results(0),String)
            p_out_isFound = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByBenefit_GraphAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String)
            Me.HltClmPaidByBenefit_GraphAsync(p_in_grp_code, p_in_ac_code, p_in_pol_year, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByBenefit_GraphAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal userState As Object)
            If (Me.HltClmPaidByBenefit_GraphOperationCompleted Is Nothing) Then
                Me.HltClmPaidByBenefit_GraphOperationCompleted = AddressOf Me.OnHltClmPaidByBenefit_GraphOperationCompleted
            End If
            Me.InvokeAsync("HltClmPaidByBenefit_Graph", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year}, Me.HltClmPaidByBenefit_GraphOperationCompleted, userState)
        End Sub
        
        Private Sub OnHltClmPaidByBenefit_GraphOperationCompleted(ByVal arg As Object)
            If (Not (Me.HltClmPaidByBenefit_GraphCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HltClmPaidByBenefit_GraphCompleted(Me, New HltClmPaidByBenefit_GraphCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C22302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub DelHltClmPaidByBenefit(ByVal p_in_user_id As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("DelHltClmPaidByBenefit", New Object() {p_in_user_id})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByBenefitAsync(ByVal p_in_user_id As String)
            Me.DelHltClmPaidByBenefitAsync(p_in_user_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByBenefitAsync(ByVal p_in_user_id As String, ByVal userState As Object)
            If (Me.DelHltClmPaidByBenefitOperationCompleted Is Nothing) Then
                Me.DelHltClmPaidByBenefitOperationCompleted = AddressOf Me.OnDelHltClmPaidByBenefitOperationCompleted
            End If
            Me.InvokeAsync("DelHltClmPaidByBenefit", New Object() {p_in_user_id}, Me.DelHltClmPaidByBenefitOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelHltClmPaidByBenefitOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelHltClmPaidByBenefitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelHltClmPaidByBenefitCompleted(Me, New DelHltClmPaidByBenefitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C203230213C293130213C283130213C273130213C263130213C253130213C243130213C23313021"& _ 
            "3C223130213C213130213C2031302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub HltClmPaidByAcc_Emp( _
                    ByVal p_in_grp_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_pol_no As String,  _
                    ByVal p_in_pol_year As String,  _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_language As String,  _
                    ByVal p_in_section_code As String,  _
                    ByVal p_in_sort_type As String,  _
                    ByVal p_in_top_level As String,  _
                    ByRef p_out_as_of_date As String,  _
                    ByRef p_out_effect_date As String,  _
                    ByRef p_out_expire_date As String,  _
                    ByRef p_out_pol_name As String,  _
                    ByRef p_out_ac_name As String,  _
                    ByRef p_out_hlt_clm As String,  _
                    ByRef p_out_hlt_clm2 As String,  _
                    ByRef p_out_hlt_clm3 As String,  _
                    ByRef p_out_type As String,  _
                    ByRef p_out_msg As String,  _
                    ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("HltClmPaidByAcc_Emp", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language, p_in_section_code, p_in_sort_type, p_in_top_level})
            p_out_as_of_date = CType(results(0),String)
            p_out_effect_date = CType(results(1),String)
            p_out_expire_date = CType(results(2),String)
            p_out_pol_name = CType(results(3),String)
            p_out_ac_name = CType(results(4),String)
            p_out_hlt_clm = CType(results(5),String)
            p_out_hlt_clm2 = CType(results(6),String)
            p_out_hlt_clm3 = CType(results(7),String)
            p_out_type = CType(results(8),String)
            p_out_msg = CType(results(9),String)
            p_out_isFound = CType(results(10),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByAcc_EmpAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_language As String, ByVal p_in_section_code As String, ByVal p_in_sort_type As String, ByVal p_in_top_level As String)
            Me.HltClmPaidByAcc_EmpAsync(p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language, p_in_section_code, p_in_sort_type, p_in_top_level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByAcc_EmpAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_language As String, ByVal p_in_section_code As String, ByVal p_in_sort_type As String, ByVal p_in_top_level As String, ByVal userState As Object)
            If (Me.HltClmPaidByAcc_EmpOperationCompleted Is Nothing) Then
                Me.HltClmPaidByAcc_EmpOperationCompleted = AddressOf Me.OnHltClmPaidByAcc_EmpOperationCompleted
            End If
            Me.InvokeAsync("HltClmPaidByAcc_Emp", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language, p_in_section_code, p_in_sort_type, p_in_top_level}, Me.HltClmPaidByAcc_EmpOperationCompleted, userState)
        End Sub
        
        Private Sub OnHltClmPaidByAcc_EmpOperationCompleted(ByVal arg As Object)
            If (Not (Me.HltClmPaidByAcc_EmpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HltClmPaidByAcc_EmpCompleted(Me, New HltClmPaidByAcc_EmpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C22302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub DelHltClmPaidByAcc_Emp(ByVal p_in_user_id As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("DelHltClmPaidByAcc_Emp", New Object() {p_in_user_id})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByAcc_EmpAsync(ByVal p_in_user_id As String)
            Me.DelHltClmPaidByAcc_EmpAsync(p_in_user_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByAcc_EmpAsync(ByVal p_in_user_id As String, ByVal userState As Object)
            If (Me.DelHltClmPaidByAcc_EmpOperationCompleted Is Nothing) Then
                Me.DelHltClmPaidByAcc_EmpOperationCompleted = AddressOf Me.OnDelHltClmPaidByAcc_EmpOperationCompleted
            End If
            Me.InvokeAsync("DelHltClmPaidByAcc_Emp", New Object() {p_in_user_id}, Me.DelHltClmPaidByAcc_EmpOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelHltClmPaidByAcc_EmpOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelHltClmPaidByAcc_EmpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelHltClmPaidByAcc_EmpCompleted(Me, New DelHltClmPaidByAcc_EmpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2632302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub InsertUserProfile( _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_user_passwd As String,  _
                    ByVal p_in_user_type As String,  _
                    ByVal p_in_user_name_t As String,  _
                    ByVal p_in_user_name_e As String,  _
                    ByVal p_in_user_broker_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_company_name As String,  _
                    ByVal p_in_passwd_date As String,  _
                    ByVal p_in_user_s_date As String,  _
                    ByVal p_in_user_e_date As String,  _
                    ByVal p_in_user_level As String,  _
                    ByVal p_in_user_email As String,  _
                    ByVal p_in_user_tel As String,  _
                    ByVal p_in_market_email As String,  _
                    ByVal p_in_market_cc_email As String,  _
                    ByVal p_in_claim_email As String,  _
                    ByVal p_in_claim_cc_email As String,  _
                    ByVal p_in_disc_reason As String,  _
                    ByVal p_in_user_status As String,  _
                    ByVal p_in_is_first_login As String,  _
                    ByVal p_in_login_fail_count As String,  _
                    ByVal p_in_input_person As String,  _
                    ByVal p_in_create_dttm As String,  _
                    ByVal p_in_mnt_dttm As String,  _
                    ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("InsertUserProfile", New Object() {p_in_user_id, p_in_user_passwd, p_in_user_type, p_in_user_name_t, p_in_user_name_e, p_in_user_broker_code, p_in_ac_code, p_in_company_name, p_in_passwd_date, p_in_user_s_date, p_in_user_e_date, p_in_user_level, p_in_user_email, p_in_user_tel, p_in_market_email, p_in_market_cc_email, p_in_claim_email, p_in_claim_cc_email, p_in_disc_reason, p_in_user_status, p_in_is_first_login, p_in_login_fail_count, p_in_input_person, p_in_create_dttm, p_in_mnt_dttm})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUserProfileAsync( _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_user_passwd As String,  _
                    ByVal p_in_user_type As String,  _
                    ByVal p_in_user_name_t As String,  _
                    ByVal p_in_user_name_e As String,  _
                    ByVal p_in_user_broker_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_company_name As String,  _
                    ByVal p_in_passwd_date As String,  _
                    ByVal p_in_user_s_date As String,  _
                    ByVal p_in_user_e_date As String,  _
                    ByVal p_in_user_level As String,  _
                    ByVal p_in_user_email As String,  _
                    ByVal p_in_user_tel As String,  _
                    ByVal p_in_market_email As String,  _
                    ByVal p_in_market_cc_email As String,  _
                    ByVal p_in_claim_email As String,  _
                    ByVal p_in_claim_cc_email As String,  _
                    ByVal p_in_disc_reason As String,  _
                    ByVal p_in_user_status As String,  _
                    ByVal p_in_is_first_login As String,  _
                    ByVal p_in_login_fail_count As String,  _
                    ByVal p_in_input_person As String,  _
                    ByVal p_in_create_dttm As String,  _
                    ByVal p_in_mnt_dttm As String)
            Me.InsertUserProfileAsync(p_in_user_id, p_in_user_passwd, p_in_user_type, p_in_user_name_t, p_in_user_name_e, p_in_user_broker_code, p_in_ac_code, p_in_company_name, p_in_passwd_date, p_in_user_s_date, p_in_user_e_date, p_in_user_level, p_in_user_email, p_in_user_tel, p_in_market_email, p_in_market_cc_email, p_in_claim_email, p_in_claim_cc_email, p_in_disc_reason, p_in_user_status, p_in_is_first_login, p_in_login_fail_count, p_in_input_person, p_in_create_dttm, p_in_mnt_dttm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUserProfileAsync( _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_user_passwd As String,  _
                    ByVal p_in_user_type As String,  _
                    ByVal p_in_user_name_t As String,  _
                    ByVal p_in_user_name_e As String,  _
                    ByVal p_in_user_broker_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_company_name As String,  _
                    ByVal p_in_passwd_date As String,  _
                    ByVal p_in_user_s_date As String,  _
                    ByVal p_in_user_e_date As String,  _
                    ByVal p_in_user_level As String,  _
                    ByVal p_in_user_email As String,  _
                    ByVal p_in_user_tel As String,  _
                    ByVal p_in_market_email As String,  _
                    ByVal p_in_market_cc_email As String,  _
                    ByVal p_in_claim_email As String,  _
                    ByVal p_in_claim_cc_email As String,  _
                    ByVal p_in_disc_reason As String,  _
                    ByVal p_in_user_status As String,  _
                    ByVal p_in_is_first_login As String,  _
                    ByVal p_in_login_fail_count As String,  _
                    ByVal p_in_input_person As String,  _
                    ByVal p_in_create_dttm As String,  _
                    ByVal p_in_mnt_dttm As String,  _
                    ByVal userState As Object)
            If (Me.InsertUserProfileOperationCompleted Is Nothing) Then
                Me.InsertUserProfileOperationCompleted = AddressOf Me.OnInsertUserProfileOperationCompleted
            End If
            Me.InvokeAsync("InsertUserProfile", New Object() {p_in_user_id, p_in_user_passwd, p_in_user_type, p_in_user_name_t, p_in_user_name_e, p_in_user_broker_code, p_in_ac_code, p_in_company_name, p_in_passwd_date, p_in_user_s_date, p_in_user_e_date, p_in_user_level, p_in_user_email, p_in_user_tel, p_in_market_email, p_in_market_cc_email, p_in_claim_email, p_in_claim_cc_email, p_in_disc_reason, p_in_user_status, p_in_is_first_login, p_in_login_fail_count, p_in_input_person, p_in_create_dttm, p_in_mnt_dttm}, Me.InsertUserProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertUserProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertUserProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertUserProfileCompleted(Me, New InsertUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2232302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub UpdateUserProfile( _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_user_type As String,  _
                    ByVal p_in_user_name_t As String,  _
                    ByVal p_in_user_name_e As String,  _
                    ByVal p_in_user_broker_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_company_name As String,  _
                    ByVal p_in_passwd_date As String,  _
                    ByVal p_in_user_s_date As String,  _
                    ByVal p_in_user_e_date As String,  _
                    ByVal p_in_user_level As String,  _
                    ByVal p_in_user_email As String,  _
                    ByVal p_in_user_tel As String,  _
                    ByVal p_in_market_email As String,  _
                    ByVal p_in_market_cc_email As String,  _
                    ByVal p_in_claim_email As String,  _
                    ByVal p_in_claim_cc_email As String,  _
                    ByVal p_in_disc_reason As String,  _
                    ByVal p_in_user_status As String,  _
                    ByVal p_in_input_person As String,  _
                    ByVal p_in_mnt_dttm As String,  _
                    ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("UpdateUserProfile", New Object() {p_in_user_id, p_in_user_type, p_in_user_name_t, p_in_user_name_e, p_in_user_broker_code, p_in_ac_code, p_in_company_name, p_in_passwd_date, p_in_user_s_date, p_in_user_e_date, p_in_user_level, p_in_user_email, p_in_user_tel, p_in_market_email, p_in_market_cc_email, p_in_claim_email, p_in_claim_cc_email, p_in_disc_reason, p_in_user_status, p_in_input_person, p_in_mnt_dttm})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserProfileAsync( _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_user_type As String,  _
                    ByVal p_in_user_name_t As String,  _
                    ByVal p_in_user_name_e As String,  _
                    ByVal p_in_user_broker_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_company_name As String,  _
                    ByVal p_in_passwd_date As String,  _
                    ByVal p_in_user_s_date As String,  _
                    ByVal p_in_user_e_date As String,  _
                    ByVal p_in_user_level As String,  _
                    ByVal p_in_user_email As String,  _
                    ByVal p_in_user_tel As String,  _
                    ByVal p_in_market_email As String,  _
                    ByVal p_in_market_cc_email As String,  _
                    ByVal p_in_claim_email As String,  _
                    ByVal p_in_claim_cc_email As String,  _
                    ByVal p_in_disc_reason As String,  _
                    ByVal p_in_user_status As String,  _
                    ByVal p_in_input_person As String,  _
                    ByVal p_in_mnt_dttm As String)
            Me.UpdateUserProfileAsync(p_in_user_id, p_in_user_type, p_in_user_name_t, p_in_user_name_e, p_in_user_broker_code, p_in_ac_code, p_in_company_name, p_in_passwd_date, p_in_user_s_date, p_in_user_e_date, p_in_user_level, p_in_user_email, p_in_user_tel, p_in_market_email, p_in_market_cc_email, p_in_claim_email, p_in_claim_cc_email, p_in_disc_reason, p_in_user_status, p_in_input_person, p_in_mnt_dttm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserProfileAsync( _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_user_type As String,  _
                    ByVal p_in_user_name_t As String,  _
                    ByVal p_in_user_name_e As String,  _
                    ByVal p_in_user_broker_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_company_name As String,  _
                    ByVal p_in_passwd_date As String,  _
                    ByVal p_in_user_s_date As String,  _
                    ByVal p_in_user_e_date As String,  _
                    ByVal p_in_user_level As String,  _
                    ByVal p_in_user_email As String,  _
                    ByVal p_in_user_tel As String,  _
                    ByVal p_in_market_email As String,  _
                    ByVal p_in_market_cc_email As String,  _
                    ByVal p_in_claim_email As String,  _
                    ByVal p_in_claim_cc_email As String,  _
                    ByVal p_in_disc_reason As String,  _
                    ByVal p_in_user_status As String,  _
                    ByVal p_in_input_person As String,  _
                    ByVal p_in_mnt_dttm As String,  _
                    ByVal userState As Object)
            If (Me.UpdateUserProfileOperationCompleted Is Nothing) Then
                Me.UpdateUserProfileOperationCompleted = AddressOf Me.OnUpdateUserProfileOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserProfile", New Object() {p_in_user_id, p_in_user_type, p_in_user_name_t, p_in_user_name_e, p_in_user_broker_code, p_in_ac_code, p_in_company_name, p_in_passwd_date, p_in_user_s_date, p_in_user_e_date, p_in_user_level, p_in_user_email, p_in_user_tel, p_in_market_email, p_in_market_cc_email, p_in_claim_email, p_in_claim_cc_email, p_in_disc_reason, p_in_user_status, p_in_input_person, p_in_mnt_dttm}, Me.UpdateUserProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserProfileCompleted(Me, New UpdateUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C22302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub DeleteUserProfile(ByVal p_in_user_id As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("DeleteUserProfile", New Object() {p_in_user_id})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserProfileAsync(ByVal p_in_user_id As String)
            Me.DeleteUserProfileAsync(p_in_user_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserProfileAsync(ByVal p_in_user_id As String, ByVal userState As Object)
            If (Me.DeleteUserProfileOperationCompleted Is Nothing) Then
                Me.DeleteUserProfileOperationCompleted = AddressOf Me.OnDeleteUserProfileOperationCompleted
            End If
            Me.InvokeAsync("DeleteUserProfile", New Object() {p_in_user_id}, Me.DeleteUserProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUserProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUserProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUserProfileCompleted(Me, New DeleteUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2131302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub InsertUserProfileDetail(ByVal p_in_user_id As String, ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_pol_no As String, ByVal p_in_user_gpo_id As String, ByVal p_in_language As String, ByVal p_in_input_person As String, ByVal p_in_create_dttm As String, ByVal p_in_mnt_dttm As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("InsertUserProfileDetail", New Object() {p_in_user_id, p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_pol_no, p_in_user_gpo_id, p_in_language, p_in_input_person, p_in_create_dttm, p_in_mnt_dttm})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUserProfileDetailAsync(ByVal p_in_user_id As String, ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_pol_no As String, ByVal p_in_user_gpo_id As String, ByVal p_in_language As String, ByVal p_in_input_person As String, ByVal p_in_create_dttm As String, ByVal p_in_mnt_dttm As String)
            Me.InsertUserProfileDetailAsync(p_in_user_id, p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_pol_no, p_in_user_gpo_id, p_in_language, p_in_input_person, p_in_create_dttm, p_in_mnt_dttm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUserProfileDetailAsync(ByVal p_in_user_id As String, ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_pol_no As String, ByVal p_in_user_gpo_id As String, ByVal p_in_language As String, ByVal p_in_input_person As String, ByVal p_in_create_dttm As String, ByVal p_in_mnt_dttm As String, ByVal userState As Object)
            If (Me.InsertUserProfileDetailOperationCompleted Is Nothing) Then
                Me.InsertUserProfileDetailOperationCompleted = AddressOf Me.OnInsertUserProfileDetailOperationCompleted
            End If
            Me.InvokeAsync("InsertUserProfileDetail", New Object() {p_in_user_id, p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_pol_no, p_in_user_gpo_id, p_in_language, p_in_input_person, p_in_create_dttm, p_in_mnt_dttm}, Me.InsertUserProfileDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertUserProfileDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertUserProfileDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertUserProfileDetailCompleted(Me, New InsertUserProfileDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C24302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub DeleteUserProfileDetail(ByVal p_in_user_id As String, ByVal p_in_group_code As String, ByVal p_in_ac_code As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("DeleteUserProfileDetail", New Object() {p_in_user_id, p_in_group_code, p_in_ac_code})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserProfileDetailAsync(ByVal p_in_user_id As String, ByVal p_in_group_code As String, ByVal p_in_ac_code As String)
            Me.DeleteUserProfileDetailAsync(p_in_user_id, p_in_group_code, p_in_ac_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserProfileDetailAsync(ByVal p_in_user_id As String, ByVal p_in_group_code As String, ByVal p_in_ac_code As String, ByVal userState As Object)
            If (Me.DeleteUserProfileDetailOperationCompleted Is Nothing) Then
                Me.DeleteUserProfileDetailOperationCompleted = AddressOf Me.OnDeleteUserProfileDetailOperationCompleted
            End If
            Me.InvokeAsync("DeleteUserProfileDetail", New Object() {p_in_user_id, p_in_group_code, p_in_ac_code}, Me.DeleteUserProfileDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUserProfileDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUserProfileDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUserProfileDetailCompleted(Me, New DeleteUserProfileDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2430213C23302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetBrokerName(ByVal p_in_broker_code As String, ByVal p_in_language As String, ByRef p_out_broker_name As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("GetBrokerName", New Object() {p_in_broker_code, p_in_language})
            p_out_broker_name = CType(results(0),String)
            p_out_isFound = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBrokerNameAsync(ByVal p_in_broker_code As String, ByVal p_in_language As String)
            Me.GetBrokerNameAsync(p_in_broker_code, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBrokerNameAsync(ByVal p_in_broker_code As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetBrokerNameOperationCompleted Is Nothing) Then
                Me.GetBrokerNameOperationCompleted = AddressOf Me.OnGetBrokerNameOperationCompleted
            End If
            Me.InvokeAsync("GetBrokerName", New Object() {p_in_broker_code, p_in_language}, Me.GetBrokerNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBrokerNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBrokerNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBrokerNameCompleted(Me, New GetBrokerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2530213C24302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetBrokerNameList(ByVal p_in_broker_code As String, ByVal p_in_broker_name As String, ByVal p_in_language As String, ByRef p_out_broker_search As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("GetBrokerNameList", New Object() {p_in_broker_code, p_in_broker_name, p_in_language})
            p_out_broker_search = CType(results(0),String)
            p_out_isFound = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBrokerNameListAsync(ByVal p_in_broker_code As String, ByVal p_in_broker_name As String, ByVal p_in_language As String)
            Me.GetBrokerNameListAsync(p_in_broker_code, p_in_broker_name, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBrokerNameListAsync(ByVal p_in_broker_code As String, ByVal p_in_broker_name As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetBrokerNameListOperationCompleted Is Nothing) Then
                Me.GetBrokerNameListOperationCompleted = AddressOf Me.OnGetBrokerNameListOperationCompleted
            End If
            Me.InvokeAsync("GetBrokerNameList", New Object() {p_in_broker_code, p_in_broker_name, p_in_language}, Me.GetBrokerNameListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBrokerNameListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBrokerNameListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBrokerNameListCompleted(Me, New GetBrokerNameListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2430213C23302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetAccountName(ByVal p_in_ac_code As String, ByVal p_in_language As String, ByRef p_out_ac_name As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("GetAccountName", New Object() {p_in_ac_code, p_in_language})
            p_out_ac_name = CType(results(0),String)
            p_out_isFound = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountNameAsync(ByVal p_in_ac_code As String, ByVal p_in_language As String)
            Me.GetAccountNameAsync(p_in_ac_code, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountNameAsync(ByVal p_in_ac_code As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetAccountNameOperationCompleted Is Nothing) Then
                Me.GetAccountNameOperationCompleted = AddressOf Me.OnGetAccountNameOperationCompleted
            End If
            Me.InvokeAsync("GetAccountName", New Object() {p_in_ac_code, p_in_language}, Me.GetAccountNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountNameCompleted(Me, New GetAccountNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2530213C24302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetAccountNameList(ByVal p_in_ac_code As String, ByVal p_in_ac_name As String, ByVal p_in_language As String, ByRef p_out_ac_search As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("GetAccountNameList", New Object() {p_in_ac_code, p_in_ac_name, p_in_language})
            p_out_ac_search = CType(results(0),String)
            p_out_isFound = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountNameListAsync(ByVal p_in_ac_code As String, ByVal p_in_ac_name As String, ByVal p_in_language As String)
            Me.GetAccountNameListAsync(p_in_ac_code, p_in_ac_name, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountNameListAsync(ByVal p_in_ac_code As String, ByVal p_in_ac_name As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetAccountNameListOperationCompleted Is Nothing) Then
                Me.GetAccountNameListOperationCompleted = AddressOf Me.OnGetAccountNameListOperationCompleted
            End If
            Me.InvokeAsync("GetAccountNameList", New Object() {p_in_ac_code, p_in_ac_name, p_in_language}, Me.GetAccountNameListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountNameListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountNameListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountNameListCompleted(Me, New GetAccountNameListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2830213C2730213C2630213C2530213C2430213C2330213C22302F2D2F2E6F69647163696C6070"& _ 
            "714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetAccountUserProfile(ByVal p_in_ac_code As String, ByRef p_out_grp_code As String, ByRef p_out_ac_name As String, ByRef p_out_pol_no As String, ByRef p_out_pol_year As String, ByRef p_out_user_gpo_id As String, ByRef p_out_language As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("GetAccountUserProfile", New Object() {p_in_ac_code})
            p_out_grp_code = CType(results(0),String)
            p_out_ac_name = CType(results(1),String)
            p_out_pol_no = CType(results(2),String)
            p_out_pol_year = CType(results(3),String)
            p_out_user_gpo_id = CType(results(4),String)
            p_out_language = CType(results(5),String)
            p_out_isFound = CType(results(6),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountUserProfileAsync(ByVal p_in_ac_code As String)
            Me.GetAccountUserProfileAsync(p_in_ac_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountUserProfileAsync(ByVal p_in_ac_code As String, ByVal userState As Object)
            If (Me.GetAccountUserProfileOperationCompleted Is Nothing) Then
                Me.GetAccountUserProfileOperationCompleted = AddressOf Me.OnGetAccountUserProfileOperationCompleted
            End If
            Me.InvokeAsync("GetAccountUserProfile", New Object() {p_in_ac_code}, Me.GetAccountUserProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountUserProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountUserProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountUserProfileCompleted(Me, New GetAccountUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C263130213C253130213C243130213C233130213C223130213C213130213C203130213C2930213C"& _ 
            "2830213C2730213C2630213C25302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetAccountDetail( _
                    ByVal p_in_grp_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_pol_year As String,  _
                    ByVal p_in_language As String,  _
                    ByRef p_out_pol_name As String,  _
                    ByRef p_out_payment_mode As String,  _
                    ByRef p_out_account_sts As String,  _
                    ByRef p_out_address As String,  _
                    ByRef p_out_fcl_amt As String,  _
                    ByRef p_out_health_card As String,  _
                    ByRef p_out_head_flag As String,  _
                    ByRef p_out_min_age As String,  _
                    ByRef p_out_max_age As String,  _
                    ByRef p_out_contact_person As String,  _
                    ByRef p_out_plan As String,  _
                    ByRef p_out_isFound_detail As String)
            Dim results() As Object = Me.Invoke("GetAccountDetail", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_language})
            p_out_pol_name = CType(results(0),String)
            p_out_payment_mode = CType(results(1),String)
            p_out_account_sts = CType(results(2),String)
            p_out_address = CType(results(3),String)
            p_out_fcl_amt = CType(results(4),String)
            p_out_health_card = CType(results(5),String)
            p_out_head_flag = CType(results(6),String)
            p_out_min_age = CType(results(7),String)
            p_out_max_age = CType(results(8),String)
            p_out_contact_person = CType(results(9),String)
            p_out_plan = CType(results(10),String)
            p_out_isFound_detail = CType(results(11),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountDetailAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_language As String)
            Me.GetAccountDetailAsync(p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountDetailAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetAccountDetailOperationCompleted Is Nothing) Then
                Me.GetAccountDetailOperationCompleted = AddressOf Me.OnGetAccountDetailOperationCompleted
            End If
            Me.InvokeAsync("GetAccountDetail", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year, p_in_language}, Me.GetAccountDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountDetailCompleted(Me, New GetAccountDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2730213C26302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetQueryAccount(ByVal p_in_user_id As String, ByVal p_in_grp_code As String, ByVal p_in_pol_no As String, ByVal p_in_ac_code As String, ByVal p_in_ac_name As String, ByRef p_out_ac_search As String, ByRef p_out_isFound_Ac As String)
            Dim results() As Object = Me.Invoke("GetQueryAccount", New Object() {p_in_user_id, p_in_grp_code, p_in_pol_no, p_in_ac_code, p_in_ac_name})
            p_out_ac_search = CType(results(0),String)
            p_out_isFound_Ac = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryAccountAsync(ByVal p_in_user_id As String, ByVal p_in_grp_code As String, ByVal p_in_pol_no As String, ByVal p_in_ac_code As String, ByVal p_in_ac_name As String)
            Me.GetQueryAccountAsync(p_in_user_id, p_in_grp_code, p_in_pol_no, p_in_ac_code, p_in_ac_name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQueryAccountAsync(ByVal p_in_user_id As String, ByVal p_in_grp_code As String, ByVal p_in_pol_no As String, ByVal p_in_ac_code As String, ByVal p_in_ac_name As String, ByVal userState As Object)
            If (Me.GetQueryAccountOperationCompleted Is Nothing) Then
                Me.GetQueryAccountOperationCompleted = AddressOf Me.OnGetQueryAccountOperationCompleted
            End If
            Me.InvokeAsync("GetQueryAccount", New Object() {p_in_user_id, p_in_grp_code, p_in_pol_no, p_in_ac_code, p_in_ac_name}, Me.GetQueryAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQueryAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQueryAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQueryAccountCompleted(Me, New GetQueryAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C223130213C213130213C203130213C2930213C2830213C27302F2D2F2E6F69647163696C607071"& _ 
            "4F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetBenefitNonHealth(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByRef p_out_ins_type As String, ByRef p_out_benefit As String, ByRef p_out_add_risk_flag As String, ByRef p_out_add_risk As String, ByRef p_out_remark As String, ByRef p_out_isFound_non_health As String)
            Dim results() As Object = Me.Invoke("GetBenefitNonHealth", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language})
            p_out_ins_type = CType(results(0),String)
            p_out_benefit = CType(results(1),String)
            p_out_add_risk_flag = CType(results(2),String)
            p_out_add_risk = CType(results(3),String)
            p_out_remark = CType(results(4),String)
            p_out_isFound_non_health = CType(results(5),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitNonHealthAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String)
            Me.GetBenefitNonHealthAsync(p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitNonHealthAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetBenefitNonHealthOperationCompleted Is Nothing) Then
                Me.GetBenefitNonHealthOperationCompleted = AddressOf Me.OnGetBenefitNonHealthOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitNonHealth", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language}, Me.GetBenefitNonHealthOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitNonHealthOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitNonHealthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitNonHealthCompleted(Me, New GetBenefitNonHealthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2930213C2830213C27302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetBenefitHealthIPD(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByRef p_out_sub_ins_type As String, ByRef p_out_benefit As String, ByRef p_out_isFound_ipd As String)
            Dim results() As Object = Me.Invoke("GetBenefitHealthIPD", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language})
            p_out_sub_ins_type = CType(results(0),String)
            p_out_benefit = CType(results(1),String)
            p_out_isFound_ipd = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthIPDAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String)
            Me.GetBenefitHealthIPDAsync(p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthIPDAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetBenefitHealthIPDOperationCompleted Is Nothing) Then
                Me.GetBenefitHealthIPDOperationCompleted = AddressOf Me.OnGetBenefitHealthIPDOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitHealthIPD", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language}, Me.GetBenefitHealthIPDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitHealthIPDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitHealthIPDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitHealthIPDCompleted(Me, New GetBenefitHealthIPDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2930213C2830213C27302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetBenefitHealthOPD(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByRef p_out_sub_ins_type As String, ByRef p_out_benefit As String, ByRef p_out_isFound_opd As String)
            Dim results() As Object = Me.Invoke("GetBenefitHealthOPD", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language})
            p_out_sub_ins_type = CType(results(0),String)
            p_out_benefit = CType(results(1),String)
            p_out_isFound_opd = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthOPDAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String)
            Me.GetBenefitHealthOPDAsync(p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthOPDAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetBenefitHealthOPDOperationCompleted Is Nothing) Then
                Me.GetBenefitHealthOPDOperationCompleted = AddressOf Me.OnGetBenefitHealthOPDOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitHealthOPD", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language}, Me.GetBenefitHealthOPDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitHealthOPDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitHealthOPDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitHealthOPDCompleted(Me, New GetBenefitHealthOPDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2930213C2830213C27302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetBenefitHealthDental(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByRef p_out_sub_ins_type As String, ByRef p_out_benefit As String, ByRef p_out_isFound_opd As String)
            Dim results() As Object = Me.Invoke("GetBenefitHealthDental", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language})
            p_out_sub_ins_type = CType(results(0),String)
            p_out_benefit = CType(results(1),String)
            p_out_isFound_opd = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthDentalAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String)
            Me.GetBenefitHealthDentalAsync(p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthDentalAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetBenefitHealthDentalOperationCompleted Is Nothing) Then
                Me.GetBenefitHealthDentalOperationCompleted = AddressOf Me.OnGetBenefitHealthDentalOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitHealthDental", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language}, Me.GetBenefitHealthDentalOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitHealthDentalOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitHealthDentalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitHealthDentalCompleted(Me, New GetBenefitHealthDentalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2930213C2830213C27302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetBenefitHealthMajorMed(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByRef p_out_sub_ins_type As String, ByRef p_out_benefit As String, ByRef p_out_isFound_ipd As String)
            Dim results() As Object = Me.Invoke("GetBenefitHealthMajorMed", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language})
            p_out_sub_ins_type = CType(results(0),String)
            p_out_benefit = CType(results(1),String)
            p_out_isFound_ipd = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthMajorMedAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String)
            Me.GetBenefitHealthMajorMedAsync(p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthMajorMedAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetBenefitHealthMajorMedOperationCompleted Is Nothing) Then
                Me.GetBenefitHealthMajorMedOperationCompleted = AddressOf Me.OnGetBenefitHealthMajorMedOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitHealthMajorMed", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language}, Me.GetBenefitHealthMajorMedOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitHealthMajorMedOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitHealthMajorMedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitHealthMajorMedCompleted(Me, New GetBenefitHealthMajorMedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2930213C2830213C27302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub GetBenefitHealthMaternity(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByRef p_out_sub_ins_type As String, ByRef p_out_benefit As String, ByRef p_out_isFound_mater As String)
            Dim results() As Object = Me.Invoke("GetBenefitHealthMaternity", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language})
            p_out_sub_ins_type = CType(results(0),String)
            p_out_benefit = CType(results(1),String)
            p_out_isFound_mater = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthMaternityAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String)
            Me.GetBenefitHealthMaternityAsync(p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitHealthMaternityAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_ben_tab_code As String, ByVal p_in_ben_tab_s_date As String, ByVal p_in_ben_tab_end_no As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.GetBenefitHealthMaternityOperationCompleted Is Nothing) Then
                Me.GetBenefitHealthMaternityOperationCompleted = AddressOf Me.OnGetBenefitHealthMaternityOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitHealthMaternity", New Object() {p_in_grp_code, p_in_ac_code, p_in_ben_tab_code, p_in_ben_tab_s_date, p_in_ben_tab_end_no, p_in_language}, Me.GetBenefitHealthMaternityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitHealthMaternityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitHealthMaternityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitHealthMaternityCompleted(Me, New GetBenefitHealthMaternityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C273130213C263130213C253130213C243130213C233130213C223130213C213130213C20313021"& _ 
            "3C29302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub HltClmPaidByDiagnose( _
                    ByVal p_in_grp_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_pol_no As String,  _
                    ByVal p_in_pol_year As String,  _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_sort_type As String,  _
                    ByVal p_in_top_level As String,  _
                    ByVal p_in_language As String,  _
                    ByRef p_out_as_of_date As String,  _
                    ByRef p_out_pol_name As String,  _
                    ByRef p_out_ac_name As String,  _
                    ByRef p_out_effect_date As String,  _
                    ByRef p_out_expire_date As String,  _
                    ByRef p_out_hlt_clm1 As String,  _
                    ByRef p_out_hlt_clm2 As String,  _
                    ByRef p_out_hlt_clm3 As String,  _
                    ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("HltClmPaidByDiagnose", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_sort_type, p_in_top_level, p_in_language})
            p_out_as_of_date = CType(results(0),String)
            p_out_pol_name = CType(results(1),String)
            p_out_ac_name = CType(results(2),String)
            p_out_effect_date = CType(results(3),String)
            p_out_expire_date = CType(results(4),String)
            p_out_hlt_clm1 = CType(results(5),String)
            p_out_hlt_clm2 = CType(results(6),String)
            p_out_hlt_clm3 = CType(results(7),String)
            p_out_isFound = CType(results(8),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByDiagnoseAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_sort_type As String, ByVal p_in_top_level As String, ByVal p_in_language As String)
            Me.HltClmPaidByDiagnoseAsync(p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_sort_type, p_in_top_level, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByDiagnoseAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_sort_type As String, ByVal p_in_top_level As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.HltClmPaidByDiagnoseOperationCompleted Is Nothing) Then
                Me.HltClmPaidByDiagnoseOperationCompleted = AddressOf Me.OnHltClmPaidByDiagnoseOperationCompleted
            End If
            Me.InvokeAsync("HltClmPaidByDiagnose", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_sort_type, p_in_top_level, p_in_language}, Me.HltClmPaidByDiagnoseOperationCompleted, userState)
        End Sub
        
        Private Sub OnHltClmPaidByDiagnoseOperationCompleted(ByVal arg As Object)
            If (Not (Me.HltClmPaidByDiagnoseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HltClmPaidByDiagnoseCompleted(Me, New HltClmPaidByDiagnoseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C22302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub DelHltClmPaidByDiagnose(ByVal p_in_user_id As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("DelHltClmPaidByDiagnose", New Object() {p_in_user_id})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByDiagnoseAsync(ByVal p_in_user_id As String)
            Me.DelHltClmPaidByDiagnoseAsync(p_in_user_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByDiagnoseAsync(ByVal p_in_user_id As String, ByVal userState As Object)
            If (Me.DelHltClmPaidByDiagnoseOperationCompleted Is Nothing) Then
                Me.DelHltClmPaidByDiagnoseOperationCompleted = AddressOf Me.OnDelHltClmPaidByDiagnoseOperationCompleted
            End If
            Me.InvokeAsync("DelHltClmPaidByDiagnose", New Object() {p_in_user_id}, Me.DelHltClmPaidByDiagnoseOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelHltClmPaidByDiagnoseOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelHltClmPaidByDiagnoseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelHltClmPaidByDiagnoseCompleted(Me, New DelHltClmPaidByDiagnoseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C273130213C263130213C253130213C243130213C233130213C223130213C213130213C20313021"& _ 
            "3C29302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub HltClmPaidByHospital( _
                    ByVal p_in_grp_code As String,  _
                    ByVal p_in_ac_code As String,  _
                    ByVal p_in_pol_no As String,  _
                    ByVal p_in_pol_year As String,  _
                    ByVal p_in_user_id As String,  _
                    ByVal p_in_sort_type As String,  _
                    ByVal p_in_top_level As String,  _
                    ByVal p_in_language As String,  _
                    ByRef p_out_as_of_date As String,  _
                    ByRef p_out_pol_name As String,  _
                    ByRef p_out_ac_name As String,  _
                    ByRef p_out_effect_date As String,  _
                    ByRef p_out_expire_date As String,  _
                    ByRef p_out_hlt_clm1 As String,  _
                    ByRef p_out_hlt_clm2 As String,  _
                    ByRef p_out_hlt_clm3 As String,  _
                    ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("HltClmPaidByHospital", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_sort_type, p_in_top_level, p_in_language})
            p_out_as_of_date = CType(results(0),String)
            p_out_pol_name = CType(results(1),String)
            p_out_ac_name = CType(results(2),String)
            p_out_effect_date = CType(results(3),String)
            p_out_expire_date = CType(results(4),String)
            p_out_hlt_clm1 = CType(results(5),String)
            p_out_hlt_clm2 = CType(results(6),String)
            p_out_hlt_clm3 = CType(results(7),String)
            p_out_isFound = CType(results(8),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByHospitalAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_sort_type As String, ByVal p_in_top_level As String, ByVal p_in_language As String)
            Me.HltClmPaidByHospitalAsync(p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_sort_type, p_in_top_level, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByHospitalAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_sort_type As String, ByVal p_in_top_level As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.HltClmPaidByHospitalOperationCompleted Is Nothing) Then
                Me.HltClmPaidByHospitalOperationCompleted = AddressOf Me.OnHltClmPaidByHospitalOperationCompleted
            End If
            Me.InvokeAsync("HltClmPaidByHospital", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_sort_type, p_in_top_level, p_in_language}, Me.HltClmPaidByHospitalOperationCompleted, userState)
        End Sub
        
        Private Sub OnHltClmPaidByHospitalOperationCompleted(ByVal arg As Object)
            If (Not (Me.HltClmPaidByHospitalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HltClmPaidByHospitalCompleted(Me, New HltClmPaidByHospitalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C22302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub DelHltClmPaidByHospital(ByVal p_in_user_id As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("DelHltClmPaidByHospital", New Object() {p_in_user_id})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByHospitalAsync(ByVal p_in_user_id As String)
            Me.DelHltClmPaidByHospitalAsync(p_in_user_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByHospitalAsync(ByVal p_in_user_id As String, ByVal userState As Object)
            If (Me.DelHltClmPaidByHospitalOperationCompleted Is Nothing) Then
                Me.DelHltClmPaidByHospitalOperationCompleted = AddressOf Me.OnDelHltClmPaidByHospitalOperationCompleted
            End If
            Me.InvokeAsync("DelHltClmPaidByHospital", New Object() {p_in_user_id}, Me.DelHltClmPaidByHospitalOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelHltClmPaidByHospitalOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelHltClmPaidByHospitalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelHltClmPaidByHospitalCompleted(Me, New DelHltClmPaidByHospitalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C233130213C223130213C213130213C203130213C2930213C2830213C27302F2D2F2E6F69647163"& _ 
            "696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub HltClmPaidByPlanRelation(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_language As String, ByRef p_out_as_of_date As String, ByRef p_out_pol_name As String, ByRef p_out_ac_name As String, ByRef p_out_effect_date As String, ByRef p_out_expire_date As String, ByRef p_out_hlt_clm As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("HltClmPaidByPlanRelation", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language})
            p_out_as_of_date = CType(results(0),String)
            p_out_pol_name = CType(results(1),String)
            p_out_ac_name = CType(results(2),String)
            p_out_effect_date = CType(results(3),String)
            p_out_expire_date = CType(results(4),String)
            p_out_hlt_clm = CType(results(5),String)
            p_out_isFound = CType(results(6),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByPlanRelationAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_language As String)
            Me.HltClmPaidByPlanRelationAsync(p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByPlanRelationAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_no As String, ByVal p_in_pol_year As String, ByVal p_in_user_id As String, ByVal p_in_language As String, ByVal userState As Object)
            If (Me.HltClmPaidByPlanRelationOperationCompleted Is Nothing) Then
                Me.HltClmPaidByPlanRelationOperationCompleted = AddressOf Me.OnHltClmPaidByPlanRelationOperationCompleted
            End If
            Me.InvokeAsync("HltClmPaidByPlanRelation", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_no, p_in_pol_year, p_in_user_id, p_in_language}, Me.HltClmPaidByPlanRelationOperationCompleted, userState)
        End Sub
        
        Private Sub OnHltClmPaidByPlanRelationOperationCompleted(ByVal arg As Object)
            If (Not (Me.HltClmPaidByPlanRelationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HltClmPaidByPlanRelationCompleted(Me, New HltClmPaidByPlanRelationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C2530213C24302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub HltClmPaidByPlanRelation_Graph(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByRef p_out_clm_by_treat_grp As String, ByRef p_out_isFound As String)
            Dim results() As Object = Me.Invoke("HltClmPaidByPlanRelation_Graph", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year})
            p_out_clm_by_treat_grp = CType(results(0),String)
            p_out_isFound = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByPlanRelation_GraphAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String)
            Me.HltClmPaidByPlanRelation_GraphAsync(p_in_grp_code, p_in_ac_code, p_in_pol_year, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HltClmPaidByPlanRelation_GraphAsync(ByVal p_in_grp_code As String, ByVal p_in_ac_code As String, ByVal p_in_pol_year As String, ByVal userState As Object)
            If (Me.HltClmPaidByPlanRelation_GraphOperationCompleted Is Nothing) Then
                Me.HltClmPaidByPlanRelation_GraphOperationCompleted = AddressOf Me.OnHltClmPaidByPlanRelation_GraphOperationCompleted
            End If
            Me.InvokeAsync("HltClmPaidByPlanRelation_Graph", New Object() {p_in_grp_code, p_in_ac_code, p_in_pol_year}, Me.HltClmPaidByPlanRelation_GraphOperationCompleted, userState)
        End Sub
        
        Private Sub OnHltClmPaidByPlanRelation_GraphOperationCompleted(ByVal arg As Object)
            If (Not (Me.HltClmPaidByPlanRelation_GraphCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HltClmPaidByPlanRelation_GraphCompleted(Me, New HltClmPaidByPlanRelation_GraphCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("13C22302F2D2F2E6F69647163696C6070714F5052574245475A3360727", RequestNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup", ResponseNamespace:="urn:magic.RUNGTIWA.MagicWS_WebGroup")>  _
        Public Sub DelHltClmPaidByPlanRelation(ByVal p_in_user_id As String, ByRef p_out_ack As String)
            Dim results() As Object = Me.Invoke("DelHltClmPaidByPlanRelation", New Object() {p_in_user_id})
            p_out_ack = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByPlanRelationAsync(ByVal p_in_user_id As String)
            Me.DelHltClmPaidByPlanRelationAsync(p_in_user_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelHltClmPaidByPlanRelationAsync(ByVal p_in_user_id As String, ByVal userState As Object)
            If (Me.DelHltClmPaidByPlanRelationOperationCompleted Is Nothing) Then
                Me.DelHltClmPaidByPlanRelationOperationCompleted = AddressOf Me.OnDelHltClmPaidByPlanRelationOperationCompleted
            End If
            Me.InvokeAsync("DelHltClmPaidByPlanRelation", New Object() {p_in_user_id}, Me.DelHltClmPaidByPlanRelationOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelHltClmPaidByPlanRelationOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelHltClmPaidByPlanRelationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelHltClmPaidByPlanRelationCompleted(Me, New DelHltClmPaidByPlanRelationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserProfileCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_name_t() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_name_e() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_broker_code() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_code() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_company_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_passwd_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_s_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_e_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_level() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_email() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(10),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_tel() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(11),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_marker_email() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(12),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_market_cc_email() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(13),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_claim_email() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(14),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_claim_cc_email() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(15),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_disc_reason() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(16),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_is_first_login() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(17),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_login_fail_count() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(18),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_input_person() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(19),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_mnt_dttm() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(20),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(21),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserJoinCaseCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserJoinCaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserJoinCaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_case() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case3() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case4() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case5() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case6() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case7() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case8() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case9() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_case10() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_msg_data_over() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(10),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFoundCase() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(11),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetContactNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetContactNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContactNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_gpo_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_gpo_email() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_gpo_tel() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_gpo_cc_email() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ChangeUserProfileCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeUserProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeUserProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryMemberCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_mem_search() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_mem_search2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_mem_search3() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_msg_data_over() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_mem() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetDetailMemberCompletedEventHandler(ByVal sender As Object, ByVal e As GetDetailMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDetailMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_effect_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan_e_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_benefit_sts() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_mem_dob() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_mem_age() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_mem_sex() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_mem_sect() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_mem_bkac_no() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_card() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_consider() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan_notepad1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(10),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan_notepad2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(11),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan_nonhlt() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(12),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan_code_h1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(13),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan_code_h2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(14),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan_hlt1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(15),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan_hlt2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(16),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_det() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(17),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSectionNameListCompletedEventHandler(ByVal sender As Object, ByVal e As GetSectionNameListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSectionNameListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_sect_search() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HltClmPaidByBenefitCompletedEventHandler(ByVal sender As Object, ByVal e As HltClmPaidByBenefitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HltClmPaidByBenefitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_as_of_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_effect_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_expire_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_pol_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HltClmPaidByBenefit_GraphCompletedEventHandler(ByVal sender As Object, ByVal e As HltClmPaidByBenefit_GraphCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HltClmPaidByBenefit_GraphCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_clm_by_treat_grp() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DelHltClmPaidByBenefitCompletedEventHandler(ByVal sender As Object, ByVal e As DelHltClmPaidByBenefitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelHltClmPaidByBenefitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HltClmPaidByAcc_EmpCompletedEventHandler(ByVal sender As Object, ByVal e As HltClmPaidByAcc_EmpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HltClmPaidByAcc_EmpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_as_of_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_effect_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_expire_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_pol_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm3() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_msg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(10),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DelHltClmPaidByAcc_EmpCompletedEventHandler(ByVal sender As Object, ByVal e As DelHltClmPaidByAcc_EmpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelHltClmPaidByAcc_EmpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub InsertUserProfileCompletedEventHandler(ByVal sender As Object, ByVal e As InsertUserProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertUserProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateUserProfileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteUserProfileCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUserProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUserProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub InsertUserProfileDetailCompletedEventHandler(ByVal sender As Object, ByVal e As InsertUserProfileDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertUserProfileDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteUserProfileDetailCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUserProfileDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUserProfileDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBrokerNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetBrokerNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBrokerNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_broker_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBrokerNameListCompletedEventHandler(ByVal sender As Object, ByVal e As GetBrokerNameListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBrokerNameListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_broker_search() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAccountNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAccountNameListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountNameListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountNameListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_search() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAccountUserProfileCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountUserProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountUserProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_grp_code() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_pol_no() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_pol_year() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_user_gpo_id() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_language() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAccountDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_pol_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_payment_mode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_account_sts() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_address() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_fcl_amt() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_health_card() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_head_flag() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_min_age() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_max_age() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_contact_person() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_plan() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(10),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_detail() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(11),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetQueryAccountCompletedEventHandler(ByVal sender As Object, ByVal e As GetQueryAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQueryAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_search() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_Ac() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBenefitNonHealthCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitNonHealthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitNonHealthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ins_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_benefit() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_add_risk_flag() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_add_risk() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_remark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_non_health() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBenefitHealthIPDCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitHealthIPDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitHealthIPDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_sub_ins_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_benefit() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_ipd() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBenefitHealthOPDCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitHealthOPDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitHealthOPDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_sub_ins_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_benefit() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_opd() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBenefitHealthDentalCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitHealthDentalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitHealthDentalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_sub_ins_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_benefit() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_opd() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBenefitHealthMajorMedCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitHealthMajorMedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitHealthMajorMedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_sub_ins_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_benefit() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_ipd() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBenefitHealthMaternityCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitHealthMaternityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitHealthMaternityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_sub_ins_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_benefit() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound_mater() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HltClmPaidByDiagnoseCompletedEventHandler(ByVal sender As Object, ByVal e As HltClmPaidByDiagnoseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HltClmPaidByDiagnoseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_as_of_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_pol_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_effect_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_expire_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm3() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DelHltClmPaidByDiagnoseCompletedEventHandler(ByVal sender As Object, ByVal e As DelHltClmPaidByDiagnoseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelHltClmPaidByDiagnoseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HltClmPaidByHospitalCompletedEventHandler(ByVal sender As Object, ByVal e As HltClmPaidByHospitalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HltClmPaidByHospitalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_as_of_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_pol_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_effect_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_expire_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm3() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DelHltClmPaidByHospitalCompletedEventHandler(ByVal sender As Object, ByVal e As DelHltClmPaidByHospitalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelHltClmPaidByHospitalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HltClmPaidByPlanRelationCompletedEventHandler(ByVal sender As Object, ByVal e As HltClmPaidByPlanRelationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HltClmPaidByPlanRelationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_as_of_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_pol_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_ac_name() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_effect_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_expire_date() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_hlt_clm() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub HltClmPaidByPlanRelation_GraphCompletedEventHandler(ByVal sender As Object, ByVal e As HltClmPaidByPlanRelation_GraphCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HltClmPaidByPlanRelation_GraphCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_clm_by_treat_grp() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_out_isFound() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DelHltClmPaidByPlanRelationCompletedEventHandler(ByVal sender As Object, ByVal e As DelHltClmPaidByPlanRelationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelHltClmPaidByPlanRelationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property p_out_ack() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
